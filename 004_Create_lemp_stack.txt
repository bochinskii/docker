---------------------------------
Создание LEMP Stack'а. Docker way
---------------------------------

Рассмотрим создание LEMP стэкана примере.

$ mkdir ./004_Create_lemp_stack; cd ./004_Create_lemp_stack

$ mkdir docker_way; cd ./docker_way


https://hub.docker.com/_/mysql

https://hub.docker.com/_/php

https://hub.docker.com/_/nginx

https://hub.docker.com/_/phpmyadmin


Создадим volume - site, в котором будут лежать тестовые файлы сайта (index.html, info.php,
volume - nginxconfigd, где рассположится конфигурационный файл тестового сайта.
Так же создадим остальные volumes'ы в которые мы смонируем инетресующие нас директории.


$ docker volume create site

$ docker volume create nginxconfigd

$ docker volume create mysqlconfigd

$ docker volume create mysqldbs


Скопируем тестовые файлы

$ sudo cp files/{index.html,info.php} /var/lib/docker/volumes/site/_data

$ sudo cp files/default.conf /var/lib/docker/volumes/nginxconfigd/_data

----------------------------------------------
Запуск связанных контейнеров с помощью --link
---------------------------------------------

Запустим контейнер mysql сервера

$ docker container run --name mysql -e MYSQL_ROOT_PASSWORD=P@ssw0rd12345 -v mysqlconfigd:/etc/mysql/conf.d -v mysqldbs:/var/lib/mysql -d mysql:8.0


Теперь можно запустить php fpm контейнер. Обратите внимание, что мы сделали связь (--link) между
двумя контенерами. Это для того, чтобы phpfpm знал где mysql севрер.

$ docker container run --name phpfpm --link mysql -d -v site:/var/www/html php:8.0-fpm


Теперь запустим web севрер (nginx). Ему тоже нужна связь, но уже с phpfpm контейнером

$ docker container run --name nginx --link phpfpm -d -v site:/var/www/html -v nginxconfigd:/etc/nginx/conf.d -p 80:80 nginx:1.21


Так же, опиционально мы запустили php my admin

$ docker run --name phpmyadmin --link mysql -e PMA_HOST=mysql -d -p 8080:80 phpmyadmin:5.2




$ docker ps

CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS          PORTS                                   NAMES
4f4b7e163976   phpmyadmin    "/docker-entrypoint.…"   39 seconds ago   Up 38 seconds   0.0.0.0:8080->80/tcp, :::8080->80/tcp   phpmyadmin
8edc24f12c08   nginx         "/docker-entrypoint.…"   11 minutes ago   Up 11 minutes   0.0.0.0:80->80/tcp, :::80->80/tcp       nginx
65198cb82ca0   php:8.0-fpm   "docker-php-entrypoi…"   12 minutes ago   Up 12 minutes   9000/tcp                                phpfpm
7549dd08910a   mysql         "docker-entrypoint.s…"   13 minutes ago   Up 13 minutes   3306/tcp, 33060/tcp                     mysql



Вот примеры того, как делается связь между контенерами

$ docker container exec -it nginx cat /etc/hosts

...

172.17.0.3	phpfpm 65198cb82ca0
172.17.0.4	8edc24f12c08


$ docker container exec -it phpmyadmin cat /etc/hosts

...

172.17.0.2	mysql 7549dd08910a
172.17.0.5	4f4b7e163976

Все, можно проверять. Все работет.

--------------------------------------------------------
Запуск связанных контейнеров в отдельной сети
------------------------------------------------

https://docs.docker.com/network/bridge/


Как мы видили, есть контейнеры к котором нужно делать связь (--link). Мы это делаем
вручную, что не удобно. Можно это автоматизировать с помощью создания отдельной
сети (network) и запуск контейнеров там.


Можно удалить все контейнеры.

$ docker container stop `docker ps -q`

$ docker container rm `docker ps -a -q`

Так же удалим volumes'ы касательно mysql севрера т.к. там остались базы данных.
А нам, нужен "чистый" контейнер с базой данных.

$ docker volume rm mysqldbs

$ docker volume rm mysqlconfigd

Пересоздадим удаленные volumes'ы

$ docker volume create mysqldbs

$ docker volume create mysqlconfigd



$ docker network ls

NETWORK ID     NAME      DRIVER    SCOPE
26224b5a282e   bridge    bridge    local
0f1fd6a89cbf   host      host      local
256242ca06b3   none      null      local


$ docker network create lemp --driver bridge


$ docker network ls

NETWORK ID     NAME      DRIVER    SCOPE
26224b5a282e   bridge    bridge    local
0f1fd6a89cbf   host      host      local
01f14c38a28c   lemp      bridge    local
256242ca06b3   none      null      local


$ docker container run --name mysql --network lemp -e MYSQL_ROOT_PASSWORD=P@ssw0rd12345 -v mysqlconfigd:/etc/mysql/conf.d -v mysqldbs:/var/lib/mysql -d mysql:8.0

$ docker container run --name phpfpm --network lemp -d -v site:/var/www/html php:8.0-fpm

$ docker container run --name nginx --network lemp -d -v site:/var/www/html -v nginxconfigd:/etc/nginx/conf.d -p 80:80 nginx.1.21

$ docker container run --name phpmyadmin --network lemp -e PMA_HOST=mysql -d -p 8080:80 phpmyadmin:5.2



Можно удалить все контейнеры и volumes'ы

$ docker container stop `docker ps -q`

$ docker container rm `docker ps -a -q`


$ docker volume rm `docker volume ls -q`


-----------------------------------------
Создание LEMP Stack'а. Docker Compose way
-----------------------------------------

https://docs.docker.com/engine/reference/commandline/compose/

https://docs.docker.com/compose/compose-file/compose-file-v3/

Как вы заметили, мы запускаем контейнера с определенной последовательностью.
Причем делаем 4 команды (создание 4-ех контейнеров). А что если контейнеров
больше и взаимосвязи между ними сложнее. Есть выход. Запускать контейнеры с
помощью docker compose.

$ cd ../docker_way

В данной диреткории мы создадим файл - docker-compose.yml. С его содержимым вы
можете ознакомиться самостоятельно.

Заранее создадим все volumes'ы. Это конечно не обязательно, но мы хотим заранее
скопировать тестовый файлы сайта и конфиурации web сервера. Особенно важно конфигруация
web сервер т.к. если мы ее скопируем после поднятия nginx, то нам придется перезапускать
этот контейнер.

$ docker volume create mysqlconfigd

$ docker volume create mysqldbs

$ docker volume create nginxconfigd

$ docker volume create site


$ docker volume ls
DRIVER    VOLUME NAME
local     mysqlconfigd
local     mysqldbs
local     nginxconfigd
local     site

Указать composer'у использовать уже созданные volumes'ы мы можем с помощью
параметра - "external: true" в секции - volumes

volumes:
  mysqldbs:
    external: true
  mysqlconfigd:
    external: true
  site:
    external: true
  nginxconfigd:
    external: true

Стоит отметить, что если compose будет автоматически создавать volumes'ы (убрать парамметр -
"external: true"), то он добавит к их именам преффикс имени директории в которой
находится docker-compose.yml файл т.е. в нашем случае - docker_compose_way.
Или, если мы передадим опцию -p <название проекта> при выполнении команды - up,
то в качестве проффикса будет название проекта.

Скопируем все необходимые файлы

$ sudo cp files/in* /var/lib/docker/volumes/site/_data

$ sudo cp files/*.conf /var/lib/docker/volumes/nginxconfigd/_data



Так же не забудьте создать network с именем - lemp, если вы ее вдруг удалили в прошлый раз

$ docker network create lemp --driver bridge

Дело в том, что мы будем использовать уже созданную сеть.
Это указывается параметром - "external: true" в секции networks

networks:
  lemp:
    external: true
    driver: bridge

Если этот параметр убрать, то compose автоматически создаст network при выполнении
комманды - up. Имя этой сети будет состоять из с преффикса: имени проекта или
директории в которой лежит файл - docker-compose.yml и названия (в нашем случае - lemp).

Отметим, что мы указали пароль пользователя root к базе данных в отдельном файле (env_file)
вместо того, чтобы передаьть его с помощью enviroment. Это способ не указывать пароль
в docker-compose.yml файле, если это не нужно.

Так же отметим, что в контейнере mysql мы используем проверку работоспособности - healthcheck.

Еще отметим, что мы часто используем depends_on. Это значит, что одни контейнеры должны запускаться
только после других. При этом если это необходимо запускаем контейнеры после проверки
healthcheck.



Запускаем.

$ docker compose -p bochinskii up -d

[+] Running 4/4
 ⠿ Container bochinskii-mysql-1       Healthy                                                                                                                             87.0s
 ⠿ Container bochinskii-phpfpm-1      Started                                                                                                                             87.1s
 ⠿ Container bochinskii-phpmyadmin-1  Started                                                                                                                              4.5s
 ⠿ Container bochinskii-nginx-1       Started                                                                                                                             86.9s

$ docker compose -p bochinskii ps
NAME                      COMMAND                  SERVICE             STATUS              PORTS
bochinskii-mysql-1        "docker-entrypoint.s…"   mysql               running (healthy)   33060/tcp
bochinskii-nginx-1        "/docker-entrypoint.…"   nginx               running             0.0.0.0:80->80/tcp, :::80->80/tcp
bochinskii-phpfpm-1       "docker-php-entrypoi…"   phpfpm              running             9000/tcp
bochinskii-phpmyadmin-1   "/docker-entrypoint.…"   phpmyadmin          running             0.0.0.0:8080->80/tcp, :::8080->80/tcp

Все работает.

Так можно удалить контейнеры разом

$ docker compose -p bochinskii stop

[+] Running 4/4
 ⠿ Container bochinskii-phpmyadmin-1  Stopped                                                                                                                              2.6s
 ⠿ Container bochinskii-nginx-1       Stopped                                                                                                                              1.7s
 ⠿ Container bochinskii-phpfpm-1      Stopped                                                                                                                              1.5s
 ⠿ Container bochinskii-mysql-1       Stopped

$ docker compose -p bochinskii rm

? Going to remove bochinskii-nginx-1, bochinskii-phpmyadmin-1, bochinskii-phpfpm-1, bochinskii-mysql-1 Yes
[+] Running 4/4
 ⠿ Container bochinskii-mysql-1       Removed                                                                                                                              0.2s
 ⠿ Container bochinskii-nginx-1       Removed                                                                                                                              0.2s
 ⠿ Container bochinskii-phpmyadmin-1  Removed                                                                                                                              0.2s
 ⠿ Container bochinskii-phpfpm-1      Removed











-------------------
