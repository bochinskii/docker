-------------
Основы docker
-------------


Поиск образов

$ docker search nginx
NAME                                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
nginx                                             Official build of Nginx.                        16856     [OK]
linuxserver/nginx                                 An Nginx container, brought to you by LinuxS…   168
bitnami/nginx                                     Bitnami nginx Docker Image                      131                  [OK]
ubuntu/nginx                                      Nginx, a high-performance reverse proxy & we…   49
bitnami/nginx-ingress-controller                  Bitnami Docker Image for NGINX Ingress Contr…   18                   [OK]
rancher/nginx-ingress-controller                                                                  10
ibmcom/nginx-ingress-controller                   Docker Image for IBM Cloud Private-CE (Commu…   4

...


Скачать последнюю версию образа

$ docker pull nginx:latest


Показать образы, которые скачаны локально

$ docker images

REPOSITORY   TAG       IMAGE ID       CREATED      SIZE
nginx        latest    de2543b9436b   9 days ago   142MB

или

$ docker image ls

REPOSITORY   TAG       IMAGE ID       CREATED      SIZE
nginx        latest    de2543b9436b   9 days ago   142MB





Запуск контейнера интерактивно или foreground (-it) с именем web и пробросом порта (-p) локальной машины 8080
на порт конетйнера 80.

$ docker container run --name web -it -p 8080:80 nginx

/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
/docker-entrypoint.sh: Configuration complete; ready for start up
2022/05/27 07:09:29 [notice] 1#1: using the "epoll" event method
2022/05/27 07:09:29 [notice] 1#1: nginx/1.21.6
2022/05/27 07:09:29 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6)
2022/05/27 07:09:29 [notice] 1#1: OS: Linux 5.15.0-33-generic
2022/05/27 07:09:29 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
2022/05/27 07:09:29 [notice] 1#1: start worker processes
2022/05/27 07:09:29 [notice] 1#1: start worker process 31
2022/05/27 07:09:29 [notice] 1#1: start worker process 32
2022/05/27 07:09:29 [notice] 1#1: start worker process 33
2022/05/27 07:09:29 [notice] 1#1: start worker process 34
2022/05/27 07:09:29 [notice] 1#1: start worker process 35
2022/05/27 07:09:29 [notice] 1#1: start worker process 36

< Ctrl + C > чтобы остановить выполнение контейнера

Если запустить из другого терминала curl, то вот что увидим

$ curl -I 127.0.0.1:8080

HTTP/1.1 200 OK
Server: nginx/1.21.6
Date: Fri, 27 May 2022 07:23:56 GMT
Content-Type: text/html
Content-Length: 615
Last-Modified: Tue, 25 Jan 2022 15:03:52 GMT
Connection: keep-alive
ETag: "61f01158-267"
Accept-Ranges: bytes


Запуск контейнера как демона или background (-d) с именем web_2 и пробросом порта (-p) локальной машины 8080
на порт конетйнера 80.

$ docker container run --name web_2 -d -p 8080:80 nginx

883a2a36d32a70dc10971510bbcdbed19c57191e73300a30efb7b6ed01ad1b7e


Вот так можно зайти на контейнер

$ docker container exec -it web_2 bash
root@54e3b777bac3:/#
root@54e3b777bac3:/# exit



Запуск контейнера интерактивно или foreground (-it) с именем web и пробросом порта (-p) локальной машины 8080
на порт конетйнера 80 и введя команду - bash (при запуске попадаем внутрь контейнера).

$ docker container run --name web_3 -it -p 8081:80 nginx bash
root@12e3b687a4c4:/#
root@12e3b687a4c4:/# exit
exit




Посмотреть только запущенные контейнеры

$ docker ps

CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS                                   NAMES
883a2a36d32a   nginx     "/docker-entrypoint.…"   About a minute ago   Up About a minute   0.0.0.0:8080->80/tcp, :::8080->80/tcp   web_2


Посмотреть все контейнеры (запущенные и остановленные)

$ docker ps -a

CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS                      PORTS                                   NAMES
12e3b687a4c4   nginx     "/docker-entrypoint.…"   About a minute ago   Exited (0) 19 seconds ago                                           web_3
883a2a36d32a   nginx     "/docker-entrypoint.…"   10 minutes ago       Up 10 minutes               0.0.0.0:8080->80/tcp, :::8080->80/tcp   web_2
831613b80e38   nginx     "/docker-entrypoint.…"   31 minutes ago       Exited (0) 15 minutes ago                                           web



Остановить контейнер по имени или по ID (при остановке контейнера информация, которую
вы добаили НЕ удаляется)

$ docker container stop web_2

Запустить контейнер по имени или по ID

$ docker container start web_2

Удалить контейнер по имени или по ID

$ docker container rm web


Удалить все остановленные контейнеры

$ docker rm `docker ps -a -q -f status=exited`
12e3b687a4c4
883a2a36d32a


Удалить образ по имени

$ docker image rm nginx


----------------------------------------
Детальный вывод информации о контейнерах
----------------------------------------


Есть образы, которые мало, просто, запустить. Для их корректной работы необходимо
проделать некоторые операции.

Вот пример mysql образа, для которого нужно установить root пароль.


Запуск контейнера с передачей переменной (-e) MYSQL_ROOT_PASSWORD, а так же с пробросом
случайного порта (портов) в контейнер

$ docker container run --name mysql-server -d -P -e MYSQL_ROOT_PASSWORD=<your password> mysql


Посмотреть пробросанные в контейнер порты

$ docker container port mysql-server

3306/tcp -> 0.0.0.0:49158
3306/tcp -> :::49158
33060/tcp -> 0.0.0.0:49157
33060/tcp -> :::49157

Посмотреть логи главного приложения в контейнере

$ docker container logs mysql-server


Посмотреть всю конфигурацию контейнера

$ docker container inspect mysql-server

Можно подключиться к серверу из коммандной строки (или mysql shell)

$ mysql -uroot -p<your password> -P 49158 127.0.0.1

...

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)

mysql> quit
Bye


можно подключиться к серверу через выполнение команды отданной контейнеру

$ docker container exec -it mysql-server mysql -uroot -p<your password>

...

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)

mysql> quit
Bye

Все работает. Мы указали пароль с помощью переменной окружения
